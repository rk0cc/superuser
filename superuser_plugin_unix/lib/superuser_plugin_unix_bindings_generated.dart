// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/superuser_plugin_unix.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
final class SuperuserPluginUnixBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SuperuserPluginUnixBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SuperuserPluginUnixBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Determine user who execute this program is root.
  bool is_root() {
    return _is_root();
  }

  late final _is_rootPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('is_root');
  late final _is_root = _is_rootPtr.asFunction<bool Function()>();

  /// Determine user is a group member, which eligable to execute program as root by calling
  /// sudo command.
  ///
  /// This method requires sudo bundled in OS already. Normally, majority of UNIX or liked
  /// system.
  int is_sudo_group(
    ffi.Pointer<ffi.Bool> result,
  ) {
    return _is_sudo_group(
      result,
    );
  }

  late final _is_sudo_groupPtr =
      _lookup<ffi.NativeFunction<ERRCODE Function(ffi.Pointer<ffi.Bool>)>>(
          'is_sudo_group');
  late final _is_sudo_group =
      _is_sudo_groupPtr.asFunction<int Function(ffi.Pointer<ffi.Bool>)>();

  /// Obtain name of user.
  int get_uname(
    ffi.Pointer<ffi.Pointer<ffi.Char>> result,
  ) {
    return _get_uname(
      result,
    );
  }

  late final _get_unamePtr = _lookup<
      ffi.NativeFunction<
          ERRCODE Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('get_uname');
  late final _get_uname = _get_unamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Obtain all associated group for current user.
  int get_groups(
    ffi.Pointer<ffi.Int> size,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> groups,
  ) {
    return _get_groups(
      size,
      groups,
    );
  }

  late final _get_groupsPtr = _lookup<
      ffi.NativeFunction<
          ERRCODE Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>('get_groups');
  late final _get_groups = _get_groupsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  /// Flush dynamic allocated pointers.
  void flush(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _flush(
      ptr,
    );
  }

  late final _flushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'flush');
  late final _flush =
      _flushPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}

typedef ERRCODE = ffi.UnsignedInt;
typedef DartERRCODE = int;
