// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/superuser_plugin_windows.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
final class SuperuserPluginWindowsBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SuperuserPluginWindowsBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SuperuserPluginWindowsBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Verify user who execute program has admin right.
  bool is_admin_user() {
    return _is_admin_user();
  }

  late final _is_admin_userPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('is_admin_user');
  late final _is_admin_user = _is_admin_userPtr.asFunction<bool Function()>();

  /// Determine this program is executed with admin.
  bool is_elevated() {
    return _is_elevated();
  }

  late final _is_elevatedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('is_elevated');
  late final _is_elevated = _is_elevatedPtr.asFunction<bool Function()>();

  /// Obtain name of user.
  int get_current_username(
    ffi.Pointer<ffi.Pointer<ffi.Char>> result,
  ) {
    return _get_current_username(
      result,
    );
  }

  late final _get_current_usernamePtr = _lookup<
          ffi
          .NativeFunction<DWORD Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'get_current_username');
  late final _get_current_username = _get_current_usernamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Flush string from dynamic allocated function.
  void flush_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _flush_string(
      str,
    );
  }

  late final _flush_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'flush_string');
  late final _flush_string =
      _flush_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}

typedef DWORD = ffi.UnsignedLong;
typedef DartDWORD = int;
